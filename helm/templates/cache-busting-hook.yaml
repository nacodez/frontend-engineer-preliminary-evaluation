{{- if and .Values.cdn.enabled (or (eq .Values.cdn.provider "cloudflare") (eq .Values.cdn.provider "aws")) -}}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "frontend-spa.fullname" . }}-cache-purge
  labels:
    {{- include "frontend-spa.labels" . | nindent 4 }}
  annotations:

    helm.sh/hook: post-upgrade
  
    helm.sh/hook-weight: "0"
  
    helm.sh/hook-delete-policy: hook-succeeded,before-hook-creation
spec:
  template:
    metadata:
      name: {{ include "frontend-spa.fullname" . }}-cache-purge
      labels:
        {{- include "frontend-spa.selectorLabels" . | nindent 8 }}
    spec:
      restartPolicy: Never
      containers:
        - name: cache-purge
          {{- if eq .Values.cdn.provider "cloudflare" }}
          image: curlimages/curl:7.80.0
          command:
            - "/bin/sh"
            - "-c"
            - |
              echo "Purging Cloudflare cache for {{ .Release.Name }} deployment..."
              
              # Set API variables
              CLOUDFLARE_ZONE_ID={{ .Values.cdn.zoneId | default "YOUR_ZONE_ID" | quote }}
              CLOUDFLARE_AUTH_KEY=${CLOUDFLARE_API_KEY}
              
              # Purge cache using Cloudflare API
              curl -X POST "https://api.cloudflare.com/client/v4/zones/$CLOUDFLARE_ZONE_ID/purge_cache" \
                -H "Authorization: Bearer $CLOUDFLARE_AUTH_KEY" \
                -H "Content-Type: application/json" \
                --data '{"purge_everything":true}' \
                --retry 3 \
                --retry-delay 5
              
              echo "Cache purge request sent to Cloudflare"
          {{- else if eq .Values.cdn.provider "aws" }}
          image: amazon/aws-cli:2.7.0
          command:
            - "/bin/sh"
            - "-c"
            - |
              echo "Invalidating AWS CloudFront cache for {{ .Release.Name }} deployment..."
              
              # Set AWS variables
              DISTRIBUTION_ID={{ .Values.cdn.distributionId | default "YOUR_DISTRIBUTION_ID" | quote }}
              PATH_PATTERN={{ .Values.cdn.pathPattern | default "/*" | quote }}
              
              # Create invalidation request
              aws cloudfront create-invalidation \
                --distribution-id $DISTRIBUTION_ID \
                --paths "$PATH_PATTERN" \
                --query "Invalidation.Id" \
                --output text
              
              echo "Cache invalidation request sent to CloudFront"
          {{- end }}
          env:
            {{- if eq .Values.cdn.provider "cloudflare" }}
            - name: CLOUDFLARE_API_KEY
              valueFrom:
                secretKeyRef:
                  name: cloudflare-credentials
                  key: api-key
            {{- else if eq .Values.cdn.provider "aws" }}
            {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
{{- end }}